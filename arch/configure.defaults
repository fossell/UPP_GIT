###########################################################
# This file defines the compilation, link, and archive flags for 
# supported systems.  Each record entry should follow the same
# format
#
# Preprocessor flags
# IBM4, IBM8, LINUX, CRAY90, HP, SGI, LINUXF90, VPP500
# VERBOSE
###########################################################
#ARCH	AIX with IBM Make ($DEBUG ignored) #serial dmpar
#
SFC     = xlf_r 
SF90    = xlf90_r  -qfree=f90
SCC     = cc_r

DM_FC   = mpxlf_r  
DM_F90  = mpxlf90_r  -qfree=f90
DM_CC   = mpcc_r -DMPI2_SUPPORT

FC      = CONFIGURE_FC
F90     = CONFIGURE_F90
CC      = CONFIGURE_CC
CPP     = /usr/lib/cpp

LINUX_OBJ =
BYTE_ORDER = UPPBIGENDIAN
SIZE_I8R8  = -qintsize=8 -qrealsize=8
SIZE_I4R8  = -qintsize=4 -qrealsize=8
SIZE_I4R4  = -qintsize=4 -qrealsize=4
SIZE       =

PPDEFINE      = -WF,-DIBM4 -WF,-D$(BYTE_ORDER)
PPDEFINE_C    = -DIBM4 -D$(BYTE_ORDER)
FPPDEFINE     = $(PPDEFINE)

FDEBUG  = -g -qfullpath -qflttrap=inv:ov:zero:en -qcheck -qsigtrap
CRTMDBUG=
CDEBUG  = -O0

FOPT    = -O3
CRTMOPT =
COPT    = -O3

CPP_FLAGS= $(PPDEFINE_C)
INC_FLAGS=
LDFLAGS = -lessl
FFLAGS  = -O -qmaxmem=-1 -qarch=auto -q64 -qessl -qnosave $(SIZE) \
          -qinitauto=FF911299 $(FPPDEFINE)
CFLAGS  = -q64 -C -qfullpath $(PPDEFINE_C)
ARFLAGS =

FFLAGS_CRTM = -c -qmaxmem=-1 -qarch=auto -q64 -qessl -qnosave -qfloat=nomaf
              -qinitauto -qhalt=W -qsuffix=f=f90:cpp=F90 $(SIZE)
FL_CRTM     =

FFLAGS      += $(FOPT)
FFLAGS_CRTM += $(FOPT)
CFLAGS      += $(COPT)

###########################################################
#ARCH	AIX with GNU Make #serial dmpar
#
SFC     = xlf_r 
SF90    = xlf90_r  -qfree=f90
SCC     = cc_r

DM_FC   = mpxlf_r  
DM_F90  = mpxlf90_r  -qfree=f90
DM_CC   = mpcc_r -DMPI2_SUPPORT

FC      = CONFIGURE_FC
F90     = CONFIGURE_F90
CC      = CONFIGURE_CC
CPP     = /usr/bin/cpp

LINUX_OBJ =
BYTE_ORDER = UPPBIGENDIAN
SIZE_I8R8  = -qintsize=8 -qrealsize=8
SIZE_I4R8  = -qintsize=4 -qrealsize=8
SIZE_I4R4  = -qintsize=4 -qrealsize=4
SIZE       =

PPDEFINE      = -WF,-DIBM4 -WF,-D$(BYTE_ORDER)
PPDEFINE_C    = -DIBM4 -D$(BYTE_ORDER)
FPPDEFINE     = $(PPDEFINE)

FDEBUG  = -g -qfullpath -qflttrap=inv:ov:zero:en -qcheck -qsigtrap
CRTMDBUG=
CDEBUG  = -O0

FOPT    = -O3
CRTMOPT =
COPT    = -O3

CPP_FLAGS= $(PPDEFINE_C)
INC_FLAGS=
LDFLAGS = -lessl
FFLAGS  = -O -qmaxmem=-1 -qarch=auto -q64 -qessl -qnosave $(SIZE) \
          -qinitauto=FF911299 $(FPPDEFINE)
CFLAGS  = -q64 -C -qfullpath $(PPDEFINE_C)
ARFLAGS =

FFLAGS_CRTM = -c -qmaxmem=-1 -qarch=auto -q64 -qessl -qnosave -qfloat=nomaf
              -qinitauto -qhalt=W -qsuffix=f=f90:cpp=F90 $(SIZE)
FL_CRTM     =

ifdef DEBUG
  FFLAGS      += $(FDEBUG)
  FFLAGS_CRTM += $(FDEBUG)
  CFLAGS      += $(CDEBUG)
else
  FFLAGS      += $(FOPT)
  FFLAGS_CRTM += $(FOPT)
  CFLAGS      += $(COPT)
endif

###########################################################
#ARCH	Linux i486 i586 i686, PGI compiler #serial dmpar
#
SFC   = pgf90
SF90  = pgf90 -Mfree
SCC   = pgcc

DM_FC  = mpif90 -f90=pgf90
DM_F90 = mpif90 -Mfree -f90=pgf90
DM_CC  = mpicc -cc=$(SCC)  

FC    = CONFIGURE_FC
F90   = CONFIGURE_F90
CC    = CONFIGURE_CC
CPP   = /lib/cpp 

LINUX_OBJ =
BYTE_ORDER = UPPLITTLEENDIAN
SIZE_I8R8  = -i8 -r8
SIZE_I4R8  = -i4 -r8
SIZE_I4R4  = -i4 -r4
SIZE       = 

PPDEFINE   = -DLINUX -D$(BYTE_ORDER)
FPPDEFINE  = $(PPDEFINE)

FDEBUG  = -g -O0 -Mbounds -Mchkfpstk -Mchkptr -Mchkstk -traceback \
          -Ktrap=ovf,divz
CRTMDBUG=
CDEBUG  =

FOPT    = -O3
CRTMOPT =
COPT    = -O3

CPP_FLAGS = -C -P $(FPPDEFINE)
INC_FLAGS =
LDFLAGS   = -Wl,-noinhibit-exec -Kieee
FFLAGS    = -Kieee -pc 32 -Ktrap=fp -byteswapio $(SIZE) $(FPPDEFINE)
CFLAGS    = $(PPDEFINE)
ARFLAGS   =

FFLAGS_CRTM = -c -byteswapio -Mchkstk -Mdclchk $(SIZE)\
              -Minform,inform -Mnosave -Mref_externals -Kieee
FL_CRTM     = -Kieee

ifdef DEBUG
  FFLAGS      += $(FDEBUG)
  FFLAGS_CRTM += $(FDEBUG)
  CFLAGS      += $(CDEBUG)
else
  FFLAGS      += $(FOPT)
  FFLAGS_CRTM += $(FOPT)
  CFLAGS      += $(COPT)
endif

###########################################################
#ARCH	Linux x86_64, PGI compiler # serial dmpar
#
SFC     = pgf90
SF90    = pgf90 -Mfree
SCC     = pgcc

DM_FC  = mpif90 -f90=pgf90
DM_F90 = mpif90 -Mfree -f90=pgf90
DM_CC  = mpicc  -cc=$(SCC)  

FC    = CONFIGURE_FC
F90   = CONFIGURE_F90
CC    = CONFIGURE_CC
CPP   = /lib/cpp 

LINUX_OBJ =
BYTE_ORDER = UPPLITTLEENDIAN
SIZE_I8R8  = -i8 -r8
SIZE_I4R8  = -i4 -r8
SIZE_I4R4  = -i4 -r4
SIZE       = 

PPDEFINE   = -DLINUX -D$(BYTE_ORDER)
FPPDEFINE  = $(PPDEFINE)

FDEBUG  = -O0 -g -Mbounds -Mchkfpstk -Mchkptr -Mchkstk -traceback \
          -Ktrap=ovf,divz
CRTMDBUG=
CDEBUG  =

FOPT    = -O3
CRTMOPT =
COPT    = -O3

CPP_FLAGS = -C -P $(FPPDEFINE)
INC_FLAGS =
LDFLAGS   = -Wl,-noinhibit-exec -Kieee
FFLAGS    = -Kieee -pc 64 -Ktrap=fp -byteswapio $(SIZE) $(FPPDEFINE)
CFLAGS    = $(PPDEFINE)
ARFLAGS   =

FFLAGS_CRTM = -c -byteswapio -Mchkstk -Mdclchk $(SIZE)\
              -Minform,inform -Mnosave -Mref_externals -Kieee
FL_CRTM     = -Kieee

ifdef DEBUG
  FFLAGS      += $(FDEBUG)
  FFLAGS_CRTM += $(FDEBUG)
  CFLAGS      += $(CDEBUG)
else
  FFLAGS      += $(FOPT)
  FFLAGS_CRTM += $(FOPT)
  CFLAGS      += $(COPT)
endif

###########################################################
#ARCH	Linux i486 i586 i686, Intel compiler	# serial dmpar
#
SFC     = ifort
SF90    = ifort -free
SCC     = icc

DM_FC   = mpif90 -f90=$(SFC)
DM_F90  = mpif90 -f90=$(SF90)
DM_CC   = mpicc -cc=$(SCC)

FC      = CONFIGURE_FC
F90     = CONFIGURE_F90
CC      = CONFIGURE_CC
CPP     = /lib/cpp

LINUX_OBJ  =
BYTE_ORDER = UPPLITTLEENDIAN
SIZE_I8R8  = -i8 -r8
SIZE_I4R8  = -i4 -r8
SIZEI4R4   = -i4 -r4
SIZE       =

PPDEFINE   = -DLINUX -D$(BYTE_ORDER)
FPPDEFINE  = $(PPDEFINE)

FDEBUG  = -O0 -g -traceback -check all -ftrapuv -fpe0
CRTMDBUG=
CDEBUG  =

FOPT    = -O3 -msse2
CRTMOPT = -O3 -msse2
COPT    =

CPP_FLAGS = -C -P $(FPPDEFINE)
INC_FLAGS =
LDFLAGS   = -Wl,-noinhibit-exec 
FFLAGS    = -fp-model precise -ftz -assume byterecl -convert big_endian \
            -heap-arrays $(SIZE) $(FPPDEFINE) $(FDEBUG)
CFLAGS    = -O0 $(PPDEFINE)
ARFLAGS   =

FFLAGS_CRTM    = -c -fp-model precise -ftz  -assume byterecl -convert big_endian \
                 $(SIZE) 
#FFLAGS_CRTM = -c -checkbound -convert big_endian -e03 -assume byterecl -fp-stack-check -mieee-fp
FL_CRTM     = 

ifdef DEBUG
  FFLAGS      += $(FDEBUG)
  FFLAGS_CRTM += $(FDEBUG)
  CFLAGS      += $(CDEBUG)
else
  FFLAGS      += $(FOPT)
  FFLAGS_CRTM += $(FOPT)
  CFLAGS      += $(COPT)
endif

###########################################################
#ARCH	Linux x86_64, Intel compiler	# serial dmpar
#
SFC     = ifort
SF90    = ifort -free
SCC     = icc

DM_FC   = mpif90 -f90=$(SFC)
DM_F90  = mpif90 -f90=$(SF90)
DM_CC   = mpicc -cc=$(SCC)

FC      = CONFIGURE_FC
F90     = CONFIGURE_F90
CC      = CONFIGURE_CC
CPP     = /lib/cpp

LINUX_OBJ     =
BYTE_ORDER    = UPPLITTLEENDIAN
SIZE_I8R8   = -i8 -r8
SIZE_I4R8   = -i4 -r8
SIZE_I4R4   = -i4 -r4
SIZE        =

PPDEFINE   = -DLINUX -D$(BYTE_ORDER)
FPPDEFINE  = $(PPDEFINE)

FDEBUG  = -O0 -g -traceback -check all -ftrapuv -fpe0
CRTMDBUG=
CDEBUG  =

FOPT    = -O3 -msse2
CRTMOPT = -O3 -msse2
COPT    = -O3

CPP_FLAGS = -C -P $(FPPDEFINE)
INC_FLAGS =
LDFLAGS   = -Wl,-noinhibit-exec 
FFLAGS    = -fp-model precise -ftz -assume byterecl -convert big_endian \
            -heap-arrays $(SIZE) $(FPPDEFINE)
CFLAGS    = $(PPDEFINE)
ARFLAGS   =

FFLAGS_CRTM  = -c -fp-model precise -ftz  -assume byterecl -convert big_endian \
               $(SIZE)
#FFLAGS_CRTM = -c -checkbound -convert big_endian -e03 -free -assume byterecl -fp-stack-check -mieee-fp
FL_CRTM     = 

ifdef DEBUG
  FFLAGS      += $(FDEBUG)
  FFLAGS_CRTM += $(FDEBUG)
  CFLAGS      += $(CDEBUG)
else
  FFLAGS      += $(FOPT)
  FFLAGS_CRTM += $(FOPT)
  CFLAGS      += $(COPT)
endif

###########################################################
#ARCH	Linux i486 i586 i686, gfortran compiler # serial dmpar
#
SFC      = gfortran
SF90     = gfortran -ffree-form
SCC      = gcc

DM_FC    = mpif90 -f90=$(SFC)
DM_F90   = mpif90 -f90=$(SF90)
DM_CC    = mpicc -cc=$(SCC)

FC       = CONFIGURE_FC
F90      = CONFIGURE_F90
CC       = CONFIGURE_CC
CPP      = /lib/cpp

LINUX_OBJ  = TIMEF.o
BYTE_ORDER = UPPLITTLEENDIAN
SIZE_I8R8  = -i8 -r8
SIZE_I4R8  = -i4 -r8
SIZE_I4R4  = -i4 -r4
SIZE       =

PPDEFINE   = -DLINUX -D$(BYTE_ORDER)
FPPDEFINE  = $(PPDEFINE)

FDEBUG  = -g -O -ffpe-trap=overflow,zero -fbounds-check -Wuninitialized -ftrapv -Wall
CRTMDBUG=
CDEBUG  =

FOPT    = -O3
CRTMOPT =
COPT    = -O3

CPP_FLAGS = -C -P $(FPPDEFINE)
INC_FLAGS =
LDFLAGS  = -Wl,-noinhibit-exec
FFLAGS   = -fconvert=big-endian -fno-second-underscore -frecord-marker=4 $(FPPDEFINE)\
            $(SIZE) -fno-range-check
CFLAGS   = $(PPDEFINE) -D_OPENMP
ARFLAGS  =

FFLAGS_CRTM = -c -fconvert=big-endian -fno-second-underscore -frecord-marker=4 \
              -ggdb -static $(SIZE)
FL_CRTM     = 

ifdef DEBUG
  FFLAGS      += $(FDEBUG)
  FFLAGS_CRTM += $(FDEBUG)
  CFLAGS      += $(CDEBUG)
else
  FFLAGS      += $(FOPT)
  FFLAGS_CRTM += $(FOPT)
  CFLAGS      += $(COPT)
endif

###########################################################
#ARCH	Linux x86_64, gfortran compiler # serial dmpar
#
SFC     = gfortran
SF90    = gfortran -ffree-form
SCC     = gcc

DM_FC    = mpif90 -f90=$(SFC)
DM_F90   = mpif90 -f90=$(SF90)
DM_CC    = mpicc -cc=$(SCC)

FC      = CONFIGURE_FC
F90     = CONFIGURE_F90
CC      = CONFIGURE_CC
CPP     = /lib/cpp

LINUX_OBJ  = TIMEF.o
BYTE_ORDER = UPPLITTLEENDIAN
SIZE_I8R8  = -i8 -r8
SIZE_I4R8  = -i4 -r8
SIZE_I4R4  = -i4 -r4
SIZE       =

PPDEFINE   = -DLINUX -D$(BYTE_ORDER)
FPPDEFINE  = $(PPDEFINE)

FDEBUG  = -g -O -ffpe-trap=overflow,zero -fbounds-check -Wuninitialized -ftrapv   \
          -Wall 
CRTMDBUG=
CDEBUG  =

FOPT    = -O3
CRTMOPT =
COPT    = -O3

CPP_FLAGS = -C -P $(FPPDEFINE)
INC_FLAGS =
LDFLAGS   = -Wl,-noinhibit-exec
FFLAGS    = -fconvert=big-endian -fno-second-underscore -frecord-marker=4 $(FPPDEFINE)\
            $(SIZE) -fno-range-check
CFLAGS    = $(PPDEFINE) -D_OPENMP
ARFLAGS   =

FFLAGS_CRTM = -c -fconvert=big-endian -fno-second-underscore -frecord-marker=4 \
              -ggdb -static $(SIZE)
FL_CRTM     =

ifdef DEBUG
  FFLAGS      += $(FDEBUG)
  FFLAGS_CRTM += $(FDEBUG)
  CFLAGS      += $(CDEBUG)
else
  FFLAGS      += $(FOPT)
  FFLAGS_CRTM += $(FOPT)
  CFLAGS      += $(COPT)
endif

##################################################################
#ARCH	NULL
