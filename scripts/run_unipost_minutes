#!/bin/ksh
#
set -x

# August 2005: Hui-Ya Chuang, NCEP: This script uses 
# NCEP's Unipost to post processes WRF native model 
# output, and uses copygb to horizontally interpolate posted 
# output from native A-E to a regular projection grid. 
#
# July 2006: Meral Demirtas, NCAR/DTC: Added new "copygb" 
# options and revised some parts for clarity. 
#
#--------------------------------------------------------
# This script performs 2 jobs:
#
# 1. Run Unipost
# 2. Run copygb to horizontally interpolate output from 
#    native A-E to a regular projection grid
#--------------------------------------------------------

#--- EDIT HERE --------------------------------------------------------
# TOP_DIR - where you put the UPP build directory
# DOMAINPATH - where do you want me to do my work
# WRFPATH - Where do you have a version of WRF compiled
# *** Datafile is entered below - it may reference these variables
# dyncore - set to the model used
#----------------------------------------------------------------------
export TOP_DIR=/home/username
export DOMAINPATH=${TOP_DIR}/DOMAINS/test_case
export WRFPATH=${WRF_DIR}

export UNI_POST_HOME=${TOP_DIR}/UPPV1
export POSTEXEC=${UNI_POST_HOME}/bin
# NOT USED DELETE export SCRIPTS=${UNI_POST_HOME}/scripts

#Specify Dyn Core (ARW or NMM in upper case)
dyncore="NMM"

if [ $dyncore = "NMM" ]; then
   export tag=NMM
elif [ $dyncore = "ARW" ]; then
   export tag=NCAR
else
    echo "${dyncore} is not supported. Edit script to choose ARW or NMM dyncore."
    exit
fi

#--- EDIT HERE --------------------------------------------------------
# startdate = Forecast start date
# fhr =  first forecast hour to be post-processed
# lastfhr = last forecast hour to be post-processed
# incrementhr = the incement (in hours) between forecast files
#----------------------------------------------------------------------

export startdate=2005012300
export fhr=00
export lastfhr=06
export incrementhr=01
export incrementmin=15
export lastmin=59

# cd to working directory
if [[ -e ${DOMAINPATH}/postprd ]]; then
   rm -f ${DOMAINPATH}/postprd/*
else
   mkdir ${DOMAINPATH}/postprd
fi
cd ${DOMAINPATH}/postprd

# Link Ferrier's microphysic's table and Unipost control file, 
ln -fs ${WRFPATH}/run/ETAMPNEW_DATA eta_micro_lookup.dat
ln -fs ${DOMAINPATH}/parm/wrf_cntrl.parm .

#--- EDIT HERE --------------------------------------------------------
# tmmark is an variable used as the file extention of the output
#    filename .GrbF is used if this variable is not set
# COMSP is a variable used as the initial string of the output filename
#----------------------------------------------------------------------
export tmmark=tm00
export MP_SHARED_MEMORY=yes
export MP_LABELIO=yes

#######################################################
# 1. Run Unipost 
#
# The Unipost is used to read native WRF model 
# output and put out isobaric state fields and derived fields.
#
#######################################################

export NEWDATE=$startdate

while [ $fhr -le $lastfhr ] ; do

typeset -Z3 fhr

NEWDATE=`${POSTEXEC}/ndate.exe +${fhr} $startdate`

YY=`echo $NEWDATE | cut -c1-4`
MM=`echo $NEWDATE | cut -c5-6`
DD=`echo $NEWDATE | cut -c7-8`
HH=`echo $NEWDATE | cut -c9-10`

echo 'NEWDATE' $NEWDATE
echo 'YY' $YY
export min=00

while [ $min -le $lastmin ] ; do

#--- EDIT HERE --------------------------------------------------------
# Update domains
# ie. for domain in d01 d02 d03
for domain in d01
do

#--- EDIT HERE --------------------------------------------------------
# Create input file for Unipost
#   First line is where your wrfout data is
#   Second line is the format
#   Third line is the time for this process file
#   Forth line is a tag identifing the model
#----------------------------------------------------------------------
cat > itag <<EOF
../wrfprd/wrfout_${domain}_${YY}-${MM}-${DD}_${HH}:${min}:00
netcdf
${YY}-${MM}-${DD}_${HH}:${min}:00
${tag}
EOF

#-----------------------------------------------------------------------
#   Run unipost.
#-----------------------------------------------------------------------
rm fort.*

ln -sf wrf_cntrl.parm fort.14
ln -sf griddef.out fort.110

#--- EDIT HERE --------------------------------------------------------
# Uncomment unipost.exe you want to run
#   mpirun for MPI dmpar compile
#   unipost.exe for serial compile
#----------------------------------------------------------------------
#if [[ ${fhr} -eq 15 ]]; then
#  mpirun -np 1 -dbg=pgdbg ${POSTEXEC}/unipost.exe > wrfpost_${domain}.$fhr.out 2>&1
#else
#  mpirun -np 1 ${POSTEXEC}/unipost.exe > wrfpost_${domain}.$fhr.out 2>&1
#fi
# Serial run command
  ${POSTEXEC}/unipost.exe > wrfpost_${domain}.$fhr.out 2>&1

if [ $min = 00 ]; then
mv WRFPRS${fhr}.tm00 WRFPRS_${domain}.${fhr}_${min}
else
mv WRFPRS${fhr}:${min}.tm00 WRFPRS_${domain}.${fhr}_${min}
fi

#
#----------------------------------------------------------------------
#   End of unipost job
#----------------------------------------------------------------------

ls -l WRFPRS_${domain}.${fhr}_${min}
err1=$?

if test "$err1" -ne 0
then

echo 'UNIPOST FAILED, EXITTING'
exit

fi

if [ $dyncore = "NMM" ]; then

#######################################################################
# 2. Run copygb
# 
# Copygb interpolates Unipost output from its native 
# grid to a regular projection grid. The package copygb 
# is used to horizontally interpolate from one domain 
# to another, it is necessary to run this step for wrf-nmm 
# (but not for wrf-arw) because wrf-nmm's computational 
# domain is on rotated Arakawa-E grid
#
# Copygb can be run in 3 ways as explained below. 
# Uncomment the preferable one.
#
#----------------------------------------------------------------------
#
# Option 1: 
# Copygb is run with a pre-defined AWIPS grid 
# (variable $gridno, see below) Specify the grid to 
# interpolate the forecast onto. To use standard AWIPS grids 
# (list in  http://wwwt.emc.ncep.noaa.gov/mmb/namgrids/ or 
# or http://www.nco.ncep.noaa.gov/pmb/docs/on388/tableb.html),
# set the number of the grid in variable gridno below.
# To use a user defined grid, see explanation above copygb.exe command.
#
#export gridno=212
#
#${POSTEXEC}/copygb.exe -xg${gridno} WRFPRS_${domain}.${fhr} wrfprs_${domain}.${fhr}
#
#----------------------------------------------------------------------
#
#  Option 2: 
#  Copygb ingests a kgds definition on the command line.
#${POSTEXEC}/copygb.exe -xg"255 3 109 91 37748 -77613 8 -71000 10379 9900 0 64 42000 42000" WRFPRS_${domain}.${fhr}_${min} wrfprs_${domain}.${fhr}_${min}
#
#----------------------------------------------------------------------
#
#  Option 3: 
#  Copygb can ingests contents of files too. For example:
#     copygb_gridnav.txt or copygb_hwrf.txt through variable $nav.
# 
#  Option -3.1:
#    To run for "Lambert Comformal map projection" uncomment the following line
#
 read nav < 'copygb_gridnav.txt'
#
#  Option -3.2:
#    To run for "lat-lon" uncomment the following line 
#
#read nav < 'copygb_hwrf.txt'
#
export nav
#
${POSTEXEC}/copygb.exe -xg"${nav}" WRFPRS_${domain}.${fhr}_${min} wrfprs_${domain}.${fhr}_${min}
#
# (For more info on "copygb" see WRF-NMM User's Guide, Chapter-7.)
#----------------------------------------------------------------------

# Check to see whether "copygb" created the requested file.

ls -l wrfprs_${domain}.${fhr}_${min}
err1=$?

if test "$err1" -ne 0
then

echo 'copygb FAILED, EXITTING'
exit

fi

#----------------------------------------------------------------------
#   End of copygb job
#----------------------------------------------------------------------
elif [ $dyncore = "ARW" ]; then
    ln -s WRFPRS_${domain}.${fhr}_${min} wrfprs_${domain}.${fhr}_${min}
fi

done

let "min=min+$incrementmin"
done
let "fhr=fhr+$incrementhr"

NEWDATE=`${POSTEXEC}/ndate.exe +${fhr} $startdate`

done

date
echo "End of Output Job"
exit
