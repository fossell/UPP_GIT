################################################################################
# 
#     Makefile for NCEP Post
#
#     Use:
#     make         -  build the executable
#     make clean   -  start with a clean slate
#
#     The following macros will be of interest:
#
#         TARGET   - name of the executable
#         FC       - name of Fortran compiler
#         CPP      - name of CPP
#         ARCH     - architecture
#         CPPFLAGS - CPP flags
#         OPTS     - compiler code optimizations
#         LIST     - source listing
#         SMP      - threading
#         TRAPS    - runtime traps for floating point exceptions
#         PROFILE  - source code profiling ( -pg )
#         DEBUG    - -g
#         MEM      - user data area and stack size
#         MAP      - load map
#         W3LIB    - w3lib
#         BACIO    - bacio lib
#         ESSL     - ESSL library
#         MASS     - MASS library
#         HPMLIB   - hpm lib
#         SEARCH   - library search location
# 
#         This version for eta_post with more intelligent memory allocation
#         Jim Tuccillo   Feb 2001
# 
#         This version for eta_post with asynchronous I/O server.   
#         Jim Tuccillo   June 2001
#
#################################################################################
#
# Define the name of the executable
#
#TARGET = ../exec/nceppost.x
TARGET = copygb.exe
#
# CPP, Compiler, and Linker Options
#



## WRFPATH = /misc/whome/mhu/RR13V31/trunk/WRF3.1
WRFPATH = /mnt/lfs0/projects/wrfruc/mhu/save/WRF_release/WRFV3.2_intel_arw

NETCDFPATH = ${NETCDF}
FC       = mpif90
CPP      = /lib/cpp -P -DLINUX
ARCH     = 
CPPFLAGS = 
#OPTS     = -O -qnosave -qarch=$(ARCH) -qmaxmem=-1 -NS2000
#OPTS     = -C -O -qnosave -qarch=$(ARCH) -qmaxmem=-1 -NS2000
#OPTS     = -O -g -qnosave -qarch=$(ARCH) -qmaxmem=-1 -NS2000 -bmaxdata:0x80000000
OPTS     =  -O3 -ftz -xT -fp-model precise -assume byterecl -convert big_endian -fpe0 -traceback -DLINUX
LIST     = 
FREE     = -free
#TRAPS    = -qflttrap=ov:und:zero:inv:inex -qcheck -qinitauto=FF
TRAPS    = 
PROFILE  = 
DEBUG    = -g
MEM      =
MAP      =  
W3LIBDIR = ../libs
ESSL     = 
MASS     =
NCDLIBS = -L$(NETCDFPATH)/lib -lnetcdf
NCDFFLAGS = -I$(NETCDFPATH)/include
WRFFFLAGS = -I$(WRFPATH)/external/io_quilt
CRTMFFLAGS = -I../libs/incmod/crtm2
W3FLAGS = -I../libs/incmod
SFCFLAG = -I../libs/incmod
WRFLIB    = $(WRFPATH)/main/libwrflib.a \
            $(WRFPATH)/frame/pack_utils.o \
            $(WRFPATH)/external/io_int/libwrfio_int.a \
            $(WRFPATH)/external/io_netcdf/libwrfio_nf.a \
            $(WRFPATH)/external/esmf_time_f90/libesmf_time.a \
            $(WRFPATH)/external/RSL_LITE/librsl_lite.a \
            $(WRFPATH)/external/io_grib1/libio_grib1.a \
            $(WRFPATH)/external/io_grib_share/libio_grib_share.a \
            $(WRFPATH)/external/fftpack/fftpack5/libfftpack.a

CRTMLIB = 

LAPACK = -L$(MKL) -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -lguide

SEARCH   =
#
# Assemble Options
#
FFLAGS   = $(OPTS) $(LIST) $(TRAPS) $(PROFILE) $(DEBUG) $(NCDFFLAGS) $(WRFFLAGS) $(CRTMFFLAGS) $(W3FLAGS) $(SFCFLAG)
FFLAGST  = $(OPTS) $(LIST) $(FREE) $(TRAPS) $(PROFILE) $(DEBUG) $(NCDFFLAGS) $(WRFFLAGS) $(CRTMFFLAGS) $(W3FLAGS) $(SFCFLAG)
LDFLAGS  = $(MEM) $(MAP) $(SMP) $(PROFILE)
#LIBS     = $(ESSL) $(MASS) $(SEARCH) $(NCDLIBS) $(WRFLIB) -L$(W3LIBDIR) -lw3_4 -lbacio_4 -lsp_4 -lsigio_4 -lsfcio_4 -lcrtm2
LIBS     = $(WRFLIB) \
           /lfs1/projects/wrfruc/alexander/copygb/ip/libip_4.a \
           -L /lfs1/projects/wrfruc/alexander/code/rr/hjet/RR-svn/trunk/unipost/libs -lsigio_4 -lsfcio_4 \
           -lbacio_4 -lsp_d -lcrtm2 \
           /lfs1/projects/wrfruc/alexander/copygb/w3/w3/lib/libw3_4.a \
           $(NCDLIBS) $(LAPACK)


#
# Non-threaded object files
#
OBJS=	copygb.o
#
# Includes
#
##INCLUDES= parm.tbl parmeta parmout parmsoil cuparm
#INCLUDES= parm.tbl cuparm
#
# Common Blocks
#
#COMMS=	LOOKUP.comm   RQSTFLD.comm   CTLBLK.comm  \
#        GRIDSPEC.comm CMASSI.comm RHGRD.comm

#DEPS= $(COMMS) $(INCLUDES)

.SUFFIXES:

.SUFFIXES:	.F .f .o

.F.o:
	$(CPP) $(CPPFLAGS) $< > $*.f
	$(FC) -c $(FFLAGST) $*.f

$(TARGET):	$(OBJS)
	$(FC) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)

clean:	
	/bin/rm -f  $(TARGET) *.lst *.o *.mod
#
